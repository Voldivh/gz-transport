load(
    "//ign_bazel:build_defs.bzl",
    "IGNITION_FEATURES",
    "IGNITION_ROOT",
    "IGNITION_VISIBILITY",
    "generate_include_header",
    "ign_config_header",
    "ign_export_header",
)
load(
    "@bazelruby_rules_ruby//ruby:defs.bzl",
    "ruby_binary",
    "ruby_library",
    "ruby_rspec",
    "ruby_test",
)

package(
    default_visibility = IGNITION_VISIBILITY,
    features = IGNITION_FEATURES,
)

licenses(["notice"])

exports_files(["LICENSE"])

PROJECT_NAME = "ignition-transport"

PROJECT_MAJOR = 9

PROJECT_MINOR = 0

PROJECT_PATCH = 0

# Generates config.hh based on the version numbers in CMake code.
ign_config_header(
    name = "config",
    src = "include/ignition/transport/config.hh.in",
    cmakelists = ["CMakeLists.txt"],
    project_name = PROJECT_NAME,
    project_version = (PROJECT_MAJOR, PROJECT_MINOR, PROJECT_PATCH),
)

ign_export_header(
    name = "include/ignition/transport/Export.hh",
    export_base = "IGNITION_TRANSPORT",
    lib_name = "ignition-transport",
    visibility = ["//visibility:private"],
)

public_headers_no_gen = [
    "include/ignition/transport/AdvertiseOptions.hh",
    "include/ignition/transport/CIface.h",
    "include/ignition/transport/Clock.hh",
    "include/ignition/transport/Discovery.hh",
    "include/ignition/transport/HandlerStorage.hh",
    "include/ignition/transport/Helpers.hh",
    "include/ignition/transport/MessageInfo.hh",
    "include/ignition/transport/NetUtils.hh",
    "include/ignition/transport/Node.hh",
    "include/ignition/transport/detail/Node.hh",
    "include/ignition/transport/NodeOptions.hh",
    "include/ignition/transport/NodeShared.hh",
    "include/ignition/transport/Packet.hh",
    "include/ignition/transport/Publisher.hh",
    "include/ignition/transport/RepHandler.hh",
    "include/ignition/transport/ReqHandler.hh",
    "include/ignition/transport/SubscribeOptions.hh",
    "include/ignition/transport/SubscriptionHandler.hh",
    "include/ignition/transport/TopicStorage.hh",
    "include/ignition/transport/TopicUtils.hh",
    "include/ignition/transport/TransportTypes.hh",
    "include/ignition/transport/Uuid.hh",
]

private_headers = [
    "src/NodeOptionsPrivate.hh",
    "src/NodePrivate.hh",
    "src/NodeSharedPrivate.hh",
    "src/SubscribeOptionsPrivate.hh",
]

sources = [
    "src/AdvertiseOptions.cc",
    "src/CIface.cc",
    "src/Clock.cc",
    "src/Discovery.cc",
    "src/Helpers.cc",
    "src/ign.cc",
    "src/MessageInfo.cc",
    "src/NetUtils.cc",
    "src/Node.cc",
    "src/NodeOptions.cc",
    "src/NodeShared.cc",
    "src/Publisher.cc",
    "src/SubscribeOptions.cc",
    "src/SubscriptionHandler.cc",
    "src/TopicUtils.cc",
    "src/Uuid.cc",
]

test_sources = [
    "src/AdvertiseOptions_TEST.cc",
    "src/CIface_TEST.cc",
    "src/Clock_TEST.cc",
    "src/Discovery_TEST.cc",
    "src/HandlerStorage_TEST.cc",
    "src/Helpers_TEST.cc",
    "src/ign_src_TEST.cc",
    # "src/ign_TEST.cc",
    "src/MessageInfo_TEST.cc",
    "src/NetUtils_TEST.cc",
    "src/NodeOptions_TEST.cc",
    "src/Node_TEST.cc",
    "src/Publisher_TEST.cc",
    "src/SubscribeOptions_TEST.cc",
    "src/TopicStorage_TEST.cc",
    "src/TopicUtils_TEST.cc",
    "src/Uuid_TEST.cc",
]

generate_include_header(
    name = "transporthh_genrule",
    out = "include/ignition/transport.hh",
    hdrs = public_headers_no_gen + [
        "include/ignition/transport/config.hh",
        "include/ignition/transport/Export.hh",
    ],
)

public_headers = public_headers_no_gen + [
    "include/ignition/transport/config.hh",
    "include/ignition/transport/Export.hh",
    "include/ignition/transport.hh",
    "src/ign.hh",
]

cc_library(
    name = "ign_transport",
    srcs = sources + private_headers,
    hdrs = public_headers,
    defines = select({
        ":custom": ["HAVE_IFADDRS"],
        "//conditions:default": [],
    }),
    includes = ["include"],
    deps = [
        "@sqlite3",
        "@uuid",
        "@zmq",
        IGNITION_ROOT + "ign_msgs",
        IGNITION_ROOT + "ign_bazel:utilities",
    ],
)

config_setting(
    name = "custom",
    values = {
        "define": "enable_ifaddrs=true",
    },
)

[cc_test(
    name = src.replace("src/", "").replace(".cc", ""),
    srcs = [src],
    defines = [
        "IGN_TRANSPORT_TEST_DIR='\"./ign_transport/test\"'",
        "IGN_TEST_LIBRARY_PATH='\"./ign_transport/test\"'",
    ],
    deps = [
        ":ign_transport",
        "//ign_transport/test:test_utils",
        "@gtest",
        "@gtest//:gtest_main",
    ],
) for src in test_sources]
